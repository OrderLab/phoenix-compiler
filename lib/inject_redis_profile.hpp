#include <string>
#include <unordered_set>

static std::unordered_set<std::string> inject_func_redis =
{
  "activeDefragCycle",
  "connTypeHasPendingData",
  "connTypeProcessPendingData",
  "createObject",
  "initObjectLRUOrLFU",
  "makeObjectShared",
  "createRawStringObject",
  "createEmbeddedStringObject",
  "createStringObject",
  "createHashObject",
  "decrRefCount",
  "checkType",
  "evalMemory",
  "ldbPendingChildren",
  "luaMemory",
  "digits10",
  "ll2string",
  "ull2string",
  "string2ll",
  "pubsubMemOverhead",
  "touchWatchedKey",
  "multiStateMemOverhead",
  "extend_to_usable",
  "get_proc_stat_ll",
  "_sdsnewlen",
  "sdsnewlen",
  "sdsempty",
  "sdsnew",
  "sdsdup",
  "sdsfree",
  "_sdsMakeRoomFor",
  "sdsMakeRoomFor",
  "sdsAllocPtr",
  "sdsIncrLen",
  "sdscatlen",
  "sdscatvprintf",
  "sdscatprintf",
  "sdscatfmt",
  "sdssubstr",
  "sdsrange",
  "sdstolower",
  "sdsavail",
  "sdsinclen",
  "dictGenHashFunction",
  "dictGenCaseHashFunction",
  "dictCreate",
  "_dictExpand",
  "dictExpand",
  "dictRehash",
  "dictAdd",
  "dictAddRaw",
  "dictInsertAtPosition",
  "dictFind",
  "dictFetchValue",
  "dictSetKey",
  "dictSetVal",
  "dictGetKey",
  "dictGetVal",
  "dictGetNext",
  "dictSetNext",
  "dictMemUsage",
  "dictFingerprint",
  "dictResetIterator",
  "dictGetIterator",
  "dictNext",
  "dictReleaseIterator",
  "dictTypeExpandAllowed",
  "_dictExpandIfNeeded",
  "dictFindPositionForInsert",
  "dictSetResizeEnabled",
  "listLinkNodeHead",
  "listUnlinkNode",
  "listRewind",
  "listNext",
  "listRotateHeadToTail",
  "listJoin",
  "lookupKey",
  "lookupKeyWrite",
  "lookupKeyReadOrReply",
  "dbAddInternal",
  "dbAdd",
  "signalModifiedKey",
  "getExpire",
  "keyIsExpired",
  "expireIfNeeded",
  "aeSetDontWait",
  "usUntilEarliestTimer",
  "processTimeEvents",
  "aeProcessEvents",
  "aeApiPoll",
  "connSocketWrite",
  "connSocketRead",
  "connSocketEventHandler",
  "callHandler",
  "getLRUClock",
  "LRU_CLOCK",
  "overMaxmemoryAfterAlloc",
  "handleClientsBlockedOnKeys",
  "signalKeyAsReadyLogic",
  "signalKeyAsReady",
  "blockedBeforeSleep",
  "lpNew",
  "lpFirst",
  "lpLength",
  "sdsZmallocSize",
  "authRequired",
  "putClientInPendingWriteQueue",
  "prepareClientToWrite",
  "_addReplyToBuffer",
  "_addReplyProtoToList",
  "_addReplyToBufferOrList",
  "addReply",
  "addReplyProto",
  "addReplyOrErrorObject",
  "addReplyLongLongWithPrefix",
  "addReplyAggregateLen",
  "addReplyMapLen",
  "addReplyBulkCBuffer",
  "clientHasPendingReplies",
  "freeClientOriginalArgv",
  "freeClientArgv",
  "beforeNextClient",
  "freeClientsInAsyncFreeQueue",
  "_writeToClient",
  "writeToClient",
  "handleClientsWithPendingWrites",
  "resetClient",
  "processMultibulkBuffer",
  "commandProcessed",
  "processCommandAndResetClient",
  "processInputBuffer",
  "readQueryFromClient",
  "getClientOutputBufferMemoryUsage",
  "getClientMemoryUsage",
  "getClientType",
  "closeClientOnOutputBufferLimitReached",
  "updatePausedActions",
  "isPausedActions",
  "isPausedActionsWithUpdate",
  "stopThreadedIOIfNeeded",
  "handleClientsWithPendingWritesUsingThreads",
  "postponeClientRead",
  "handleClientsWithPendingReadsUsingThreads",
  "evictClients",
  "sdsavail",
  "replicationFeedMonitors",
  "checkGoodReplicasStatus",
  "updateFailoverStatus",
  "hashTypeTryConversion",
  "hashTypeLength",
  "hashTypeInitIterator",
  "hashTypeReleaseIterator",
  "hashTypeNext",
  "hashTypeCurrentFromHashTable",
  "hashTypeLookupWriteOrCreate",
  "hashTypeConvertListpack",
  "hashTypeConvert",
  "hsetCommand",
  "addHashIteratorCursorToReply",
  "genericHgetallCommand",
  "hgetallCommand",
  "notifyKeyspaceEvent",
  "trackingInvalidateKey",
  "trackingHandlePendingKeyInvalidations",
  "trackingBroadcastInvalidationMessages",
  // "siphash",
  // "siphash_nocase", // skip this, as redis checker won't be able to run...
  "reqresSaveClientReplyOffset",
  "reqresAppendRequest",
  "reqresAppendResponse",
  "slowlogPushEntryIfNeeded",
  "ACLGetCommandID",
  "ACLSelectorCheckCmd",
  "ACLCheckAllUserCommandPerm",
  "ACLCheckAllPerm",
  "raxReallocForData",
  "raxSetData",
  "raxGetData",
  "raxAddChild",
  "raxCompressNode",
  "raxLowWalk",
  "raxGenericInsert",
  "raxInsert",
  "raxFind",
  "raxSize",
  "activeExpireCycle",
  "modulePostExecutionUnitOperations",
  "firePostExecutionUnitJobs",
  "moduleNotifyKeyspaceEvent",
  "moduleCallCommandFilters",
  "moduleFireServerEvent",
  "dictCStringKeyHash",
  "dictCStringKeyCompare",
  "moduleCount",
  "getMonotonicUs_posix",
  "monotonicGetType",
  "durationAddSample",
  "scriptIsTimedout",
  "scriptIsRunning",
  "ustime",
  "mstime",
  "dictSdsKeyCompare",
  "dictSdsKeyCaseCompare",
  "dictSdsHash",
  "dictSdsCaseHash",
  "dictExpandAllowed",
  "dbDictEntryMetadataSize",
  "tryResizeHashTables",
  "incrementallyRehash",
  "updateDictResizePolicy",
  "hasActiveChildProcess",
  "isInsideYieldingLongCommand",
  "clientsCronResizeOutputBuffer",
  "clientsCronTrackExpansiveClients",
  "updateClientMemoryUsage",
  "clientEvictionAllowed",
  "removeClientFromMemUsageBucket",
  "updateClientMemUsageAndBucket",
  "clientsCron",
  "databasesCron",
  "updateCachedTimeWithUs",
  "updateCachedTime",
  "enterExecutionUnit",
  "exitExecutionUnit",
  "cronUpdateMemoryStats",
  "serverCron",
  "beforeSleep",
  "afterSleep",
  "populateCommandLegacyRangeSpec",
  "commandAddSubcommand",
  "setImplicitACLCategories",
  "populateCommandStructure",
  "lookupCommandLogic",
  "shouldPropagate",
  "alsoPropagate",
  "slowlogPushCurrentCommand",
  "updateCommandLatencyHistogram",
  "propagatePendingCommands",
  "postExecutionUnitOperations",
  "call",
  "afterCommand",
  "commandCheckExistence",
  "commandCheckArity",
  "getCommandFlags",
  "processCommand",
  "writeCommandsDeniedByDiskError",
  "sdsavail",
  "clientsCronHandleTimeout",
  "handleBlockedClientsTimeout",
  "registerConfigValue",
  "_crc64"
};
